name: V5 Code Scan

on:
  push:
    branches:
      - "**"

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  quality-gate-code-check:
    runs-on: 
      group: cvs-linux-self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=20.9.0'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Disable Auto Plugin Install
        run: |
          mkdir -p ~/.sf
          echo '{"plugins":{"autoInstall":false}}' > ~/.sf/sf-config.json

      - name: Install Code Analyzer Plugin v5
        run: sf plugins install @salesforce/plugin-code-analyzer@latest

      - name: Confirm Only v5 Plugin Is Present
        run: sf plugins | grep code-analyzer

      - name: Get changed lines and create temporary files
        id: get-changes
        run: |
          mkdir -p temp_scanner_files
          > changed_cls_lwc_files.txt
          > line_number_mapping.txt
          > scanner-report-temp.csv
          echo "Checking for changed .cls and .lwc files..."
          # Get only changed files (.cls and .lwc)
          changed_files=$(git diff --name-only HEAD~1 HEAD -- '*.cls' '*.js' || true)
          echo "Detected changed files: $changed_files"
          if [ -z "$changed_files" ]; then
            echo "No .cls or .lwc files detected."
            echo "Problem,Severity,File,TempLine,Column,Rule,Description,URL,Category,Engine,Commit,ActualLine" > scanner-report.csv
            exit 0
          fi
          for file in $changed_files; do
            echo "Processing file: $file"
            # Extract changed lines along with their actual line numbers
            extracted_lines=$(git diff --unified=0 HEAD~1 HEAD -- "$file" | awk '
              /^@@/ { 
                next 
              }
              /^\+/ { 
                if ($0 !~ /^(diff --git|index|---|\+\+\+|@@|b\/force-app)/) {
                  print substr($0, 2);
                }
              }
            ')
            if [ -z "$extracted_lines" ]; then
              echo "No valid lines found for $file. Skipping..."
              continue
            fi
            echo "====== Extracted Lines and Line Numbers for $file ======"
            echo "$extracted_lines"
            # Store extracted lines in a temporary file
            echo "$extracted_lines" > "line_number_mapping_${file//\//_}.txt"
            temp_file="temp_scanner_files/temp_${file//\//_}"
            touch "$temp_file"
            # Write extracted lines into a valid structure based on file type
            if [[ "$file" == *.cls ]]; then
              echo "public class TempWrapperClass {" > "$temp_file"
              echo "    public static void tempMethod() {" >> "$temp_file"
              echo "        /* Extracted changed lines */" >> "$temp_file"
              while IFS= read -r line_content; do
                line_content_trimmed=$(echo "$line_content" | sed 's/^[ \t]*//;s/[ \t]*$//')
                if [[ -n "$line_content_trimmed" ]]; then
                  if [[ "$line_content_trimmed" =~ ^\}[[:space]]*$ || "$line_content_trimmed" =~ ^\{[[:space]]*$ ]]; then
                    echo "Skipping brace"
                    continue
                  fi
                  #previous_line ="$line_content_trimmed"
                  echo "        $line_content_trimmed" >> "$temp_file"  # Ensure lines are placed inside tempMethod()
                  echo "$temp_file,$line_content_trimmed" >> line_number_mapping.txt
                fi
              done < "line_number_mapping_${file//\//_}.txt"
              echo "    }" >> "$temp_file"
              echo "}" >> "$temp_file"
              cat "$temp_file"
            elif [[ "$file" == *.js ]]; then
              echo "// LWC JavaScript File" > "$temp_file"

              while IFS=, read -r line_number line_content; do
                line_content_trimmed=$(echo "$line_content" | sed 's/^[ \t]*//;s/[ \t]*$//')
                if [[ -n "$line_content_trimmed" ]]; then
                  echo "    $line_content_trimmed" >> "$temp_file"
                  echo "$temp_file,$line_number,$line_content_trimmed" >> line_number_mapping.txt
                fi
                
              done < "line_number_mapping_${file//\//_}.txt"
              elif [[ "$file" == *.html ]]; then
              echo "<!-- LWC HTML File -->" > "$temp_file"
              while IFS=, read -r line_number line_content; do
                line_content_trimmed=$(echo "$line_content" | sed 's/^[ \t]*//;s/[ \t]*$//')
                if [[ -n "$line_content_trimmed" ]]; then
                  echo "$line_content_trimmed" >> "$temp_file"
                  echo "$temp_file,$line_number,$line_content_trimmed" >> line_number_mapping.txt
                fi
              done < "line_number_mapping_${file//\//_}.txt"
            fi
            echo "$temp_file" >> changed_cls_lwc_files.txt
            echo "Created temp file: $temp_file"
          done
          echo "====== Final Line Number Mapping ======"
          cat line_number_mapping.txt || echo "No line number mapping available."
          echo "Generated temp files:"
          ls -l temp_scanner_files
          if [ ! -s changed_cls_lwc_files.txt ]; then
            echo "No temp files created. Exiting."
            exit 0
          fi
      
            
      - name: Debug Extracted Line Number Mapping
        run: |
            echo "====== FINAL LINE NUMBER MAPPING ======"
            cat line_number_mapping.txt || echo " No line mappings found!"
        
            echo "====== CHECKING FILE PATH FORMATTING ======"
            while IFS=, read -r problem severity file temp_line column rule description url category engine; do
              formatted_file_path=$(basename "$file")
              echo "Checking: $formatted_file_path, Temp Line: $temp_line"
              grep "$formatted_file_path,$temp_line" line_number_mapping.txt || echo " No match found for $formatted_file_path,$temp_line"
            done < <(tail -n +2 scanner-report-temp.csv)
        

      - name: Run Salesforce Code Analyzer v5 - PMD Best Practices
        run: |
          sf code-analyzer run \
          --workspace "$file" \
          --config-file code-analyzer.yml \
          --rule-selector AvoidDebugStatements
        env:
          NODE-OPTIONS:
            --max-old-space-size=4096

      - name: Generate Unique File Name for Scanner Report
        run: |
          #TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          #REPORT_FILE="scanner-report-${TIMESTAMP}.csv"
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s' | tr ' ' '_' | tr -cd 'A-Za-z0-9_.-')
          REPORT_FILE="${COMMIT_LABEL}.csv"
          echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
          echo " Generated unique file name: $REPORT_FILE"
      - name: Save Scanner Report Before Branch Checkout
        if: always()
        run: |
          if [ ! -f scanner-report.csv ]; then
            echo " scanner-report.csv file not found! Creating an empty report."
            echo "Problem,Severity,File,TempLine,Column,Rule,Description,URL,Category,Engine,Commit,ActualLine" > scanner-report.csv
          fi
          mkdir -p /tmp/artifact_backup
          cp scanner-report.csv /tmp/artifact_backup/${{ env.REPORT_FILE }}
          echo " Scanner report backed up in /tmp/artifact_backup/${{ env.REPORT_FILE }}."
      - name: Backup Scanner Report
        if: always()
        run: |
          mkdir -p /tmp/artifact_backup
          cp scanner-report.csv /tmp/artifact_backup/${{ env.REPORT_FILE }}
          echo " Scanner report backed up in /tmp/artifact_backup/${{ env.REPORT_FILE }}."

      - name: Discard uncommitted changes (force clean)
        run: |
          git reset --hard
          git clean -fd
          git checkout Scanner_Reports

      - name: Commit and Push Scanner Report to `Scanner_Reports` Branch
        if: always()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="Scanner_Reports"
          echo " Target Branch: $BRANCH_NAME"

          # ðŸ”¹ Check if the `Scanner_Reports` branch exists remotely
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
            echo " Remote branch $BRANCH_NAME exists."
            git checkout $BRANCH_NAME
          else
            echo " Remote branch $BRANCH_NAME does not exist! Creating it now..."
            git checkout -b $BRANCH_NAME
            git push --set-upstream origin $BRANCH_NAME
          fi

          git pull origin $BRANCH_NAME --rebase
          mkdir -p Artifact
          cp /tmp/artifact_backup/${{ env.REPORT_FILE }} Artifact/${{ env.REPORT_FILE }}
          echo " Scanner report restored to Artifact/${{ env.REPORT_FILE }}."

          git add Artifact/${{ env.REPORT_FILE }}
          git commit -m " Auto-update scanner report (${REPORT_FILE}) in Artifact folder for branch $BRANCH_NAME" || echo "No changes to commit"
          git push origin $BRANCH_NAME
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Restore scanner-report.csv for Blocking Step
        if: always()
        run: |
          echo "Restoring scanner-report.csv to $GITHUB_WORKSPACE for blocking step"
          cp /tmp/artifact_backup/${{ env.REPORT_FILE }} "$GITHUB_WORKSPACE/scanner-report.csv"
