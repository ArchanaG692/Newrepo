public with sharing class CSVDataController {
    public class CSVDataResponse {
        @AuraEnabled public List<Map<String, String>> csvData = new List<Map<String, String>>();
        @AuraEnabled public Integer clsViolationCount = 0;
        @AuraEnabled public Integer lwcViolationCount = 0;
        @AuraEnabled public Integer auraViolationCount = 0;
        @AuraEnabled public Integer objectsViolationCount = 0;
    }

    @AuraEnabled(cacheable=true)
    public static CSVDataResponse getCSVData(String caseId) {
        CSVDataResponse response = new CSVDataResponse();

        try {
            // Step 1: Fetch the CSV attachment
            List<Attachment> attachments = [
                SELECT Id, Body, Name
                FROM Attachment
                WHERE ParentId = :caseId 
                  AND Name LIKE '%.csv'
                ORDER BY CreatedDate DESC
            ];

            if (attachments.isEmpty()) {
                System.debug('‚ùå No attachments found for case: ' + caseId);
                return response;
            }

            for (Attachment csvFile : attachments) {
                Blob csvBlob = csvFile.Body;
                String csvContent = csvBlob.toString();

                List<String> lines = csvContent.split('\n');
                if (lines.isEmpty()) {
                    System.debug('‚ö†Ô∏è Attachment is empty.');
                    continue;
                }

                // Parse headers
                List<String> headers = parseCSVLine(lines[0]);
                List<String> lowercaseHeaders = new List<String>();
                for (String h : headers) {
                    lowercaseHeaders.add(h.trim().toLowerCase());
                }

                // Parse each row
                for (Integer i = 1; i < lines.size(); i++) {
                    List<String> values = parseCSVLine(lines[i]);
                    if (values.size() != headers.size()) continue;

                    Map<String, String> rowData = new Map<String, String>();
                    for (Integer j = 0; j < headers.size(); j++) {
                        rowData.put(lowercaseHeaders[j], values[j].trim().replaceAll('^\"|\"$', ''));
                    }

                    // Process file path to detect violation category
                    if (rowData.containsKey('file')) {
                        String filePath = rowData.get('file').toLowerCase();
                        String normalizedPath = filePath.replaceAll('_', '/');

                        System.debug('üîç File: ' + filePath);
                        System.debug('üìÅ Normalized: ' + normalizedPath);

                        if (normalizedPath.contains('/classes/')) {
                            response.clsViolationCount++;
                        } else if (normalizedPath.contains('/lwc/')) {
                            response.lwcViolationCount++;
                        } else if (normalizedPath.contains('/aura/')) {
                            response.auraViolationCount++;
                        } else if (normalizedPath.contains('/objects/')) {
                            response.objectsViolationCount++;
                        }
                    }

                    response.csvData.add(rowData);
                }
            }

            // Summary log
            System.debug('‚úÖ CSV Rows: ' + response.csvData.size());
            System.debug('‚úÖ Apex Violations: ' + response.clsViolationCount);
            System.debug('‚úÖ LWC Violations: ' + response.lwcViolationCount);
            System.debug('‚úÖ Aura Violations: ' + response.auraViolationCount);
            System.debug('‚úÖ Object Violations: ' + response.objectsViolationCount);

        } catch (Exception e) {
            System.debug('‚ùå CSV parse error: ' + e.getMessage());
        }

        return response;
    }

    private static List<String> parseCSVLine(String csvLine) {
        List<String> columns = new List<String>();
        Boolean insideQuote = false;
        String currentValue = '';

        for (Integer i = 0; i < csvLine.length(); i++) {
            String currentChar = csvLine.substring(i, i + 1);
            if (currentChar == '"') {
                insideQuote = !insideQuote;
            } else if (currentChar == ',' && !insideQuote) {
                columns.add(currentValue.trim());
                currentValue = '';
            } else {
                currentValue += currentChar;
            }
        }
        columns.add(currentValue.trim());
        return columns;
    }
}
