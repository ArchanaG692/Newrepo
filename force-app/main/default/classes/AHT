@isTest
private class AttachmentHandlerTest {

    @isTest
    static void testCreateAttachmentForCase_successful() {
        // Step 1: Create Scanner Report Case
        Scanner_Report_Case__c testCase = new Scanner_Report_Case__c();
        insert testCase;

        // Step 2: Upload a CSV ContentVersion (simulating file upload)
        ContentVersion cv = new ContentVersion(
            Title = 'TestFile',
            PathOnClient = 'TestFile.csv',
            VersionData = Blob.valueOf('File,Problem\nclasses/Example.cls,Violation'),
            IsMajorVersion = true
        );
        insert cv;

        // Step 3: Query the inserted ContentVersion to get ContentDocumentId
        cv = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id = :cv.Id LIMIT 1];

        // Step 4: Link ContentDocument to the Scanner Report Case
        ContentDocumentLink link = new ContentDocumentLink(
            ContentDocumentId = cv.ContentDocumentId,
            LinkedEntityId = testCase.Id,
            ShareType = 'V',
            Visibility = 'AllUsers'
        );
        insert link;

        // Step 5: Update Scanner_Report_Case__c with File ID and Name
        testCase.File_Id__c = cv.ContentDocumentId;
        testCase.File_Name__c = 'TestFile.csv';
        update testCase;

        // Step 6: Run the method
        Test.startTest();
        AttachmentHandler.createAttachmentForCase(testCase.Id);
        Test.stopTest();

        // Step 7: Assert that attachment is created
        List<Attachment> attachments = [
            SELECT Id, Name FROM Attachment WHERE ParentId = :testCase.Id
        ];
        System.assertEquals(1, attachments.size(), 'Expected 1 attachment');
        System.assert(attachments[0].Name.endsWith('.csv'), 'Expected .csv attachment');
    }

    @isTest
    static void testCreateAttachmentForCase_fileIdNull() {
        Scanner_Report_Case__c noFileCase = new Scanner_Report_Case__c();
        insert noFileCase;

        Test.startTest();
        AttachmentHandler.createAttachmentForCase(noFileCase.Id);
        Test.stopTest();

        // No attachments should be created
        List<Attachment> attachments = [SELECT Id FROM Attachment WHERE ParentId = :noFileCase.Id];
        System.assertEquals(0, attachments.size());
    }

    @isTest
    static void testCreateAttachmentForCase_nonCSVExtension() {
        Scanner_Report_Case__c testCase = new Scanner_Report_Case__c();
        insert testCase;

        ContentVersion cv = new ContentVersion(
            Title = 'NotCSVFile',
            PathOnClient = 'NotCSVFile.pdf',
            VersionData = Blob.valueOf('Some binary content'),
            IsMajorVersion = true
        );
        insert cv;

        cv = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id = :cv.Id LIMIT 1];

        ContentDocumentLink link = new ContentDocumentLink(
            ContentDocumentId = cv.ContentDocumentId,
            LinkedEntityId = testCase.Id,
            ShareType = 'V',
            Visibility = 'AllUsers'
        );
        insert link;

        testCase.File_Id__c = cv.ContentDocumentId;
        testCase.File_Name__c = 'NotCSVFile.pdf';
        update testCase;

        Test.startTest();
        AttachmentHandler.createAttachmentForCase(testCase.Id);
        Test.stopTest();

        // No attachments should be created
        List<Attachment> attachments = [SELECT Id FROM Attachment WHERE ParentId = :testCase.Id];
        System.assertEquals(0, attachments.size());
    }
}
