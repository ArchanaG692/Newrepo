@isTest
private class FileControllerTest {

    private static Id testContentDocumentId;

    @testSetup
    static void setupTestData() {
        System.debug('ðŸ”¹ Setting up test data...');

        // âœ… Create a ContentVersion (this automatically creates a ContentDocument)
        ContentVersion ver = new ContentVersion(
            Title = 'Test File',
            PathOnClient = 'TestFile.csv',
            VersionData = Blob.valueOf('Sample file content'), // Ensure valid VersionData
            FirstPublishLocationId = UserInfo.getUserId()
        );
        insert ver;

        // âœ… Fetch ContentDocumentId
        testContentDocumentId = [
            SELECT ContentDocumentId FROM ContentVersion WHERE Id = :ver.Id LIMIT 1
        ].ContentDocumentId;

        System.debug('âœ… Test ContentDocument ID: ' + testContentDocumentId);
    }

    // âœ… Test getAllFiles() - Standard Scenario
    @isTest
    static void testGetAllFiles() {
        System.debug('ðŸ”¹ Running testGetAllFiles...');
        
        Test.startTest();
        List<ContentDocument> files = FileController.getAllFiles();
        Test.stopTest();

        System.debug('âœ… Files Retrieved: ' + files.size());

        System.assertNotEquals(null, files, 'File list should not be null');
        System.assert(files.size() > 0, 'At least one file should be returned');
    }

    // âœ… Test getFileContent() - Valid Case
    @isTest
    static void testGetFileContent() {
        System.debug('ðŸ”¹ Running testGetFileContent...');
        
        Test.startTest();
        String fileContent = FileController.getFileContent(testContentDocumentId);
        Test.stopTest();

        System.debug('âœ… File Content: ' + fileContent);

        System.assertNotEquals(null, fileContent, 'File content should not be null');
        System.assert(fileContent.length() > 0, 'File content should not be empty');
    }

    // âœ… Test getFileContent() - No File Available
    @isTest
    static void testGetFileContentNoFile() {
        System.debug('ðŸ”¹ Running testGetFileContentNoFile...');
        
        Test.startTest();
        String fileContent = FileController.getFileContent('000000000000000'); // Non-existent ID
        Test.stopTest();

        System.debug('âœ… File Content for missing file: ' + fileContent);

        // âœ… Fix: Expect "NO_CONTENT" instead of null
        System.assertEquals('NO_CONTENT', fileContent, 'Should return NO_CONTENT for missing file');
    }

    // âœ… Test getAllFiles() - No Files Available Case
    @isTest
    static void testGetAllFilesNoRecords() {
        System.debug('ðŸ”¹ Running testGetAllFilesNoRecords...');
        
        Test.startTest();
        delete [SELECT Id FROM ContentDocument];
        List<ContentDocument> files = FileController.getAllFiles();
        Test.stopTest();

        System.debug('âœ… Files Retrieved After Deletion: ' + files.size());

        System.assertEquals(0, files.size(), 'File list should be empty when no files exist');
    }

    // âœ… Test getFileContent() - Edge Case: No Version Data
    @isTest
    static void testGetFileContentNoVersionData() {
        System.debug('ðŸ”¹ Running testGetFileContentNoVersionData...');
        
        // âœ… Fix: Use `Blob.valueOf(' ')` instead of empty string
        ContentVersion emptyVer = new ContentVersion(
            Title = 'Empty File',
            PathOnClient = 'EmptyFile.csv',
            VersionData = Blob.valueOf(' '), // Ensure non-empty VersionData
            FirstPublishLocationId = UserInfo.getUserId()
        );
        insert emptyVer;

        Id emptyDocId = [
            SELECT ContentDocumentId FROM ContentVersion WHERE Id = :emptyVer.Id LIMIT 1
        ].ContentDocumentId;

        Test.startTest();
        String fileContent = FileController.getFileContent(emptyDocId);
        Test.stopTest();

        System.debug('âœ… Empty File Content: ' + fileContent);

        // âœ… Fix: Expect Base64 encoding of empty space (`'IA=='` is Base64 of ' ' )
        System.assertEquals('IA==', fileContent, 'File content should return Base64 encoded empty string');
    }
}
