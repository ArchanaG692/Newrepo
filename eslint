name: V5 Code Scan

on:
  push:
    branches:
      - "**"

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  quality-gate-code-check:
    runs-on: 
      group: cvs-linux-self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=20.9.0'

      
      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Disable Auto Plugin Install
        run: |
          mkdir -p ~/.sf
          echo '{"plugins":{"autoInstall":false}}' > ~/.sf/sf-config.json

      - name: Install Code Analyzer Plugin v5
        run: |
          sf plugins uninstall @salesforce/plugin-code-analyzer || true
          sf plugins install @salesforce/plugin-code-analyzer@5.2.1

      - name: Confirm Only v5 Plugin Is Present
        run: sf plugins | grep code-analyzer

      - name: Install ESLint dependencies for LWC
        run: |
          npm init -y
          npm install --save-dev --legacy-peer-deps eslint @salesforce/eslint-config-lwc @babel/eslint-parser

      - name: Get GitHub Username of Commit Author
        id: commit-author
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          echo "Fetching GitHub username for commit SHA: $COMMIT_SHA"
          GITHUB_USERNAME=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" \
            | jq -r '.author.login')
          if [[ -z "$GITHUB_USERNAME" || "$GITHUB_USERNAME" == "null" ]]; then
            echo " GitHub username not found. Falling back to Git author name."
            GITHUB_USERNAME=$(git log -1 --pretty=format:'%an')
          fi
          echo " GitHub Username: $GITHUB_USERNAME"
          echo "commit-author=$GITHUB_USERNAME" >> $GITHUB_OUTPUT
          echo "GITHUB_USERNAME=$GITHUB_USERNAME" >> $GITHUB_ENV

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="Code Scanner Report_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${BRANCH_NAME}" >> $GITHUB_ENV  # Store the Target Branch
          echo "Target Branch = ${BRANCH_NAME}"

      - name: Get changed lines and create temporary files
        id: get-changes
        run: |
          mkdir -p temp_scanner_files
          > changed_cls_lwc_files.txt
          > line_number_mapping.txt
          > scanner-report-temp.csv
          echo "Checking for changed .cls and .lwc files..."
          # Get only changed files (.cls and .lwc)
          changed_files=$(git diff --name-only HEAD~1 HEAD -- '*.cls' '*.js' || true)
          echo "Detected changed files: $changed_files"
          if [ -z "$changed_files" ]; then
            echo "No .cls or .lwc files detected."
            echo "Problem,Severity,File,TempLine,Column,Rule,Description,URL,Category,Engine,Commit,ActualLine" > scanner-report.csv
            exit 0
          fi
          for file in $changed_files; do
            echo "Processing file: $file"
            # Extract changed lines along with their actual line numbers
            extracted_lines=$(git diff --unified=0 HEAD~1 HEAD -- "$file" | awk '
              /^@@/ { 
                next 
              }
              /^\+/ { 
                if ($0 !~ /^(diff --git|index|---|\+\+\+|@@|b\/force-app)/) {
                  print substr($0, 2);
                }
              }
            ')
            if [ -z "$extracted_lines" ]; then
              echo "No valid lines found for $file. Skipping..."
              continue
            fi
            echo "====== Extracted Lines and Line Numbers for $file ======"
            echo "$extracted_lines"
            # Store extracted lines in a temporary file
            echo "$extracted_lines" > "line_number_mapping_${file//\//_}.txt"
            temp_file="temp_scanner_files/temp_${file//\//_}"
            touch "$temp_file"
            # Write extracted lines into a valid structure based on file type
            if [[ "$file" == *.cls ]]; then
              echo "public class TempWrapperClass {" > "$temp_file"
              echo "    public static void tempMethod() {" >> "$temp_file"
              echo "        /* Extracted changed lines */" >> "$temp_file"
              while IFS= read -r line_content; do
                line_content_trimmed=$(echo "$line_content" | sed 's/^[ \t]*//;s/[ \t]*$//')
                if [[ -n "$line_content_trimmed" ]]; then
                  if [[ "$line_content_trimmed" =~ ^\}[[:space]]*$ || "$line_content_trimmed" =~ ^\{[[:space]]*$ ]]; then
                    echo "Skipping brace"
                    continue
                  fi
                  #previous_line ="$line_content_trimmed"
                  echo "        $line_content_trimmed" >> "$temp_file"  # Ensure lines are placed inside tempMethod()
                  echo "$temp_file,$line_content_trimmed" >> line_number_mapping.txt
                fi
              done < "line_number_mapping_${file//\//_}.txt"
              echo "    }" >> "$temp_file"
              echo "}" >> "$temp_file"
              cat "$temp_file"
            elif [[ "$file" == *.js ]]; then
              echo "import { LightningElement } from 'lwc';" > "$temp_file"
              echo "export default class DummyComponent extends LightningElement {" >> "$temp_file"
              echo "  connectedCallback() {" >> "$temp_file"

              while IFS= read -r line_content; do  # not CSV, so no `IFS=,`
                line_content_trimmed=$(echo "$line_content" | sed 's/^[ \t]*//;s/[ \t]*$//')
                if [[ -n "$line_content_trimmed" ]]; then
                  echo "    $line_content_trimmed" >> "$temp_file"
                fi
              done < "line_number_mapping_${file//\//_}.txt"

              echo "  }" >> "$temp_file"
              echo "}" >> "$temp_file"
              cp .eslintrc.cjs temp_scanner_files/
              
            elif [[ "$file" == *.html ]]; then
              echo "<!-- LWC HTML File -->" > "$temp_file"
              while IFS=, read -r line_number line_content; do
                line_content_trimmed=$(echo "$line_content" | sed 's/^[ \t]*//;s/[ \t]*$//')
                if [[ -n "$line_content_trimmed" ]]; then
                  echo "$line_content_trimmed" >> "$temp_file"
                  echo "$temp_file,$line_number,$line_content_trimmed" >> line_number_mapping.txt
                fi
              done < "line_number_mapping_${file//\//_}.txt"
            fi
            echo "$temp_file" >> changed_cls_lwc_files.txt
            echo "Created temp file: $temp_file"
          done
          echo "====== Final Line Number Mapping ======"
          cat line_number_mapping.txt || echo "No line number mapping available."
          echo "Generated temp files:"
          ls -l temp_scanner_files
          if [ ! -s changed_cls_lwc_files.txt ]; then
            echo "No temp files created. Exiting."
            exit 0
          fi
      
            
      - name: Debug Extracted Line Number Mapping
        run: |
            echo "====== FINAL LINE NUMBER MAPPING ======"
            cat line_number_mapping.txt || echo " No line mappings found!"
        
            echo "====== CHECKING FILE PATH FORMATTING ======"
            while IFS=, read -r problem severity file temp_line column rule description url category engine; do
              formatted_file_path=$(basename "$file")
              echo "Checking: $formatted_file_path, Temp Line: $temp_line"
              grep "$formatted_file_path,$temp_line" line_number_mapping.txt || echo " No match found for $formatted_file_path,$temp_line"
            done < <(tail -n +2 scanner-report-temp.csv)
        

      - name: Run Salesforce Code Analyzer v5 - PMD Best Practices
        run: |
          files=$(cat changed_cls_lwc_files.txt)
          if [ -z "$files" ]; then
            echo "No files to scan. Creating an empty report."
            echo "rule,engine,severity,tags,file,startLine,startColumn,endLine,endColumn,message,resources,Commit,ActualLine,TargetBranch" > scanner-report.csv
            exit 0
          fi

          # Initialize final report with headers
          echo "rule,engine,severity,tags,file,startLine,startColumn,endLine,endColumn,message,resources,Commit,ActualLine,TargetBranch" > scanner-report.csv
          
          for file in $files; do
            echo "Running SFDX Scanner on file: $file"

            if [[ "$file" == *.cls ]]; then
              sf code-analyzer run --workspace "$file" --rule-selector ApexCRUDViolation --rule-selector ApexBadCrypto --rule-selector ApexDangerousMethods --rule-selector ApexInsecureEndpoint --rule-selector ApexOpenRedirect --rule-selector ApexSharingViolations --rule-selector ApexSOQLInjection --rule-selector ApexSuggestUsingNamedCred --rule-selector ApexXSSFromEscapeFalse --rule-selector ApexXSSFromURLParam --rule-selector AvoidDebugStatements --rule-selector AvoidNonRestrictiveQueries --rule-selector EagerlyLoadedDescribeSObjectResult --rule-selector OperationWithHighCostInLoop --rule-selector OperationWithLimitsInLoop --rule-selector ApexCSRF --rule-selector AvoidDirectAccessTriggerMap --rule-selector AvoidHardcodingId --rule-selector EmptyCatchBlock --rule-selector UnusedLocalVariable --rule-selector QueueableWithoutFinalizer --rule-selector IfElseStmtsMustUseBraces --rule-selector ForLoopsMustUseBraces --output-file scanner-report-partial.csv --config-file code-analyzer.yml || echo "Scanner run failed for $file"
              # Process partial report
              if [ -f "scanner-report-partial.csv" ] && [ -s "scanner-report-partial.csv" ]; then
                tail -n +2 "scanner-report-partial.csv" | awk -F',' -v OFS=',' -v commit_author="${{ env.GITHUB_USERNAME }}" -v target_branch="${{ env.TARGET_BRANCH }}" -v unwanted_path="$UNWANTED_PATH" '{
                  $12 = commit_author;
                  if (NF < 13) $13 = "N/A";
                  $14 = target_branch;
                  print $0
                }' >> scanner-report.csv
              fi

            elif [[ "$file" == *.js ]]; then
              # Move LWC JS file to valid structure so scanner works
              echo "===================="
              mkdir -p force-app/main/default/lwc/tmpLwcComponent
              newPath="force-app/main/default/lwc/tmpLwcComponent/tmpLwcComponent.js"
              cp "$file" "$newPath"
              echo "Contents of newPath"
              cat "$newPath"

              # Run the scanner on the new valid path
              sf code-analyzer run --workspace "$newPath" --config-file code-analyzer.yml --output-file scanner-report-partial.csv || echo "Scanner run failed for $file"

              # Clean up afterwards
              rm -f "$newPath"

              # Process partial report
              if [ -f "scanner-report-partial.csv" ] && [ -s "scanner-report-partial.csv" ]; then
                tail -n +2 "scanner-report-partial.csv" | awk -F',' -v OFS=',' -v commit_author="${{ env.GITHUB_USERNAME }}" -v target_branch="${{ env.TARGET_BRANCH }}" '{
                  $12 = commit_author;
                  if (NF < 13) $13 = "N/A";
                  $14 = target_branch;
                  print $0
                }' >> scanner-report.csv
              fi

            else
              echo "Unsupported file type: $file"
            fi

          done
          
        env:
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Authenticate with Salesforce
        id: sf-auth
        run: |
          response=$(curl -X POST "https://test.salesforce.com/services/oauth2/token" \
            -d "grant_type=password" \
            -d "client_id=${{ secrets.SF_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.SF_CLIENT_SECRET }}" \
            -d "username=${{ secrets.SF_USERNAME }}" \
            -d "password=${{ secrets.SF_PASSWORD }}" )
          SF_ACCESS_TOKEN=$(echo "$response" | jq -r '.access_token')
          if [ -z "$SF_ACCESS_TOKEN" ]; then
            echo "Salesforce authentication failed."
            exit 1
          fi
          echo "SF_ACCESS_TOKEN=$SF_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "Successfully authenticated with Salesforce."

      - name: Upload Scanner Report to Salesforce
        if: success()
        run: |
            # Check if the scanner report contains violations (more than just the header)
            violation_count=$(tail -n +2 scanner-report.csv | wc -l)
            if [ "$violation_count" -eq 0 ]; then
              echo "No violations found. Skipping Salesforce upload."
              exit 0
            fi

            echo "Uploading scanner report to Salesforce..."

            # Send file to Salesforce
            response=$(curl -X POST "https://service360--arpoc2.sandbox.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion" \
              -H "Authorization: Bearer $SF_ACCESS_TOKEN" \
              -H "Content-Type: multipart/form-data" \
              -F "entity_content={\"Title\": \"${{ env.FILE_TITLE }}\", \"PathOnClient\": \"scanner-report.csv\"};type=application/json" \
              -F "VersionData=@scanner-report.csv;type=text/csv")

             #  Debug: Print the full API response
            echo " Salesforce API Response: $response"
            # Extract the ID safely (handles both array & object responses)
            contentVersionId=$(echo "$response" | jq -r 'if type=="array" then .[0].id else .id end' 2>/dev/null || echo "null")

            #contentVersionId=$(echo "$response" | jq -r '.id // empty')
        
            if [[ "$contentVersionId" == "null" || -z "$contentVersionId" ]]; then
              echo "Error: Failed to extract ContentVersion ID from response."
              echo "Full API Response: $response"  # Log full response for debugging
              exit 1
            fi
        
            echo "Successfully uploaded scanner report to Salesforce."

      - name: Generate Unique File Name for Scanner Report
        run: |
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s' | tr ' ' '_' | tr -cd 'A-Za-z0-9_.-')
          REPORT_FILE="${COMMIT_LABEL}_V5.csv"
          echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV

      - name: Save Scanner Report Before Branch Checkout
        if: always()
        run: |
          mkdir -p /tmp/artifact_backup
          cp scanner-report.csv /tmp/artifact_backup/${{ env.REPORT_FILE }}

      - name: Discard uncommitted changes (force clean)
        run: |
          git reset --hard
          git clean -fd
          git checkout Scanner_Reports

      - name: Commit and Push Scanner Report to `Scanner_Reports` Branch
        if: always()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="Scanner_Reports"

          if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
            git checkout $BRANCH_NAME
          else
            git checkout -b $BRANCH_NAME
            git push --set-upstream origin $BRANCH_NAME
          fi

          git pull origin $BRANCH_NAME --rebase
          mkdir -p Artifact1
          cp /tmp/artifact_backup/${{ env.REPORT_FILE }} Artifact1/${{ env.REPORT_FILE }}
          git add Artifact1/${{ env.REPORT_FILE }}
          git commit -m " Auto-update scanner report (${REPORT_FILE}) in Artifact1 folder for branch $BRANCH_NAME" || echo "No changes to commit"
          git push origin $BRANCH_NAME
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Restore scanner-report.csv for Blocking Step
        if: always()
        run: |
          echo "Restoring scanner-report.csv to $GITHUB_WORKSPACE for blocking step"
          cp /tmp/artifact_backup/${{ env.REPORT_FILE }} "$GITHUB_WORKSPACE/scanner-report.csv"

      #  MOVE BLOCKING COMMIT STEP TO THE LAST STEP
      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          REPORT_FILE="$GITHUB_WORKSPACE/scanner-report.csv"

          if [ -f "$REPORT_FILE" ]; then
            echo "Reading $REPORT_FILE for severity violations..."
            cat "$REPORT_FILE"

            # Apex severity 3
            apex_severity_count=$(awk -F',' 'NR>1 {
              severity = $3; gsub(/"/, "", severity); 
              file = $5; gsub(/"/, "", file); 
              if (severity == 3 && file ~ /\.cls$/) count++
            } END {print count+0}' "$REPORT_FILE")
            echo "Apex Severity 3 Issues: $apex_severity_count"

            echo "Evaluating severity violations..."

            # Count LWC (js/html) severity ≥ 2 (from ESLint)
            lwc_severity_count=$(awk -F',' '
              NR > 1 {
                gsub(/"/, "", $3);        # severity
                gsub(/"/, "", $7);        # file
                if ($3 >= 2 && ($7 ~ /\.js$/ || $7 ~ /\.html$/ || $7 ~ /\.lwc$/)) count++
              }
              END { print count + 0 }
            ' "$REPORT_FILE")

            echo "LWC Severity ≥ 2 Issues: $lwc_severity_count"

            if [ "$apex_severity_count" -gt 0 ] || [ "$lwc_severity_count" -gt 0 ]; then
              echo "Blocking commit due to high severity issues."
              echo "block-status=true" >> $GITHUB_ENV
              echo "block-status=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "No severity violations found. Proceeding."
              echo "block-status=false" >> $GITHUB_ENV
              echo "block-status=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No scanner report found at $REPORT_FILE."
            echo "block-status=true" >> $GITHUB_ENV
            echo "block-status=true" >> $GITHUB_OUTPUT
            exit 1
          fi
      
