name: Salesforce Code Analyzer v5

on:
  push:
    branches:
      - "**"

permissions:
  contents: write

jobs:
  static-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli

      - name: Disable Auto Plugin Auto-Install
        run: |
          mkdir -p ~/.sf
          echo '{"plugins":{"autoInstall":false}}' > ~/.sf/sf-config.json

      - name: Uninstall conflicting plugins
        run: |
          sf plugins uninstall @salesforce/sfdx-scanner || true
          sf plugins uninstall @salesforce/plugin-code-analyzer || true

      - name: Install Code Analyzer Plugin v5.0.0
        run: sf plugins install @salesforce/plugin-code-analyzer@5.1.0

      - name: Confirm Installed Plugins
        run: sf plugins

      - name: Run Salesforce Code Analyzer - Output JSON
        run: |
          sf code-analyzer run \
            --workspace "force-app" \
            --output-file scanner-report.csv \
            --config-file code-analyzer.yml


      - name: Upload Scanner Report CSV
        uses: actions/upload-artifact@v4
        with:
          name: code-analyzer-report
          path: scanner-report.csv

      - name: Ensure Scanner Report Exists
        if: always()  # ‚úÖ Ensures it runs even if commit is blocked
        run: |
            if [ ! -s scanner-report.csv ]; then
              echo "No scanner report generated, creating a dummy report."
              echo "Problem,Severity,File,TempLine,Column,Rule,Description,URL,Category,Engine,Commit,ActualLine" > scanner-report.csv
            fi
      - name: Debug - List Files Before Upload
        if: always()
        run: |
            echo "Listing files before uploading scanner report:"
            ls -lah
      
      - name: Generate Unique File Name for Scanner Report
        run: |
          # TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          # REPORT_FILE="scanner-report-${TIMESTAMP}.csv"
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s' | tr ' ' '_')
          REPORT_FILE="${COMMIT_LABEL}.csv"
          echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
          echo "‚úÖ Generated unique file name: $REPORT_FILE"

      - name: Save Scanner Report Before Branch Checkout
        if: always()
        run: |
          if [ ! -f scanner-report.csv ]; then
            echo "‚ùå scanner-report.csv file not found! Creating an empty report."
            echo "Problem,Severity,File,TempLine,Column,Rule,Description,URL,Category,Engine,Commit,ActualLine" > scanner-report.csv
          fi
          mkdir -p /tmp/artifact_backup
          cp scanner-report.csv /tmp/artifact_backup/${{ env.REPORT_FILE }}
          echo "‚úÖ Scanner report backed up in /tmp/artifact_backup/${{ env.REPORT_FILE }}."

      - name: Backup Scanner Report
        if: always()
        run: |
          mkdir -p /tmp/artifact_backup
          cp scanner-report.csv /tmp/artifact_backup/${{ env.REPORT_FILE }}
          echo "‚úÖ Scanner report backed up in /tmp/artifact_backup/${{ env.REPORT_FILE }}."

      - name: Commit and Push Scanner Report to `Scanner_Reports` Branch
        if: always()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="scanner-reports"
          echo "‚úÖ Target Branch: $BRANCH_NAME"

          # üîπ Check if the `scanner-reports` branch exists remotely
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
            echo "‚úÖ Remote branch $BRANCH_NAME exists."
            git fetch origin $BRANCH_NAME:$BRANCH_NAME
            git switch $BRANCH_NAME
          else
            echo "‚ùå Remote branch $BRANCH_NAME does not exist! Creating it now..."
            git checkout -b $BRANCH_NAME
            git push --set-upstream origin $BRANCH_NAME
          fi


          git pull origin $BRANCH_NAME --rebase
          mkdir -p Artifact
          cp /tmp/artifact_backup/${{ env.REPORT_FILE }} Artifact/${{ env.REPORT_FILE }}
          echo "‚úÖ Scanner report restored to Artifact/${{ env.REPORT_FILE }}."

          git add Artifact/${{ env.REPORT_FILE }}
          git commit -m "üîÑ Auto-update scanner report (${REPORT_FILE}) in Artifact folder for branch $BRANCH_NAME" || echo "No changes to commit"
          git push origin $BRANCH_NAME
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

