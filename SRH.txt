public with sharing class ScannerReportHandler {
    private static Boolean isProcessing = false;
    private static final String RECORD_TYPE_DEVELOPER_NAME = 'Your_RecordType_DevName'; // üîÅ Replace with your actual record type DeveloperName

    @future
    public static void processFiles(Set<Id> contentDocumentIds) {
        if (isProcessing) {
            System.debug('‚ö†Ô∏è Process already running. Skipping to prevent recursion.');
            return;
        }

        isProcessing = true;
        System.debug('üîç Processing Scanner Report Files for ContentDocumentIds: ' + contentDocumentIds);

        if (contentDocumentIds.isEmpty()) {
            System.debug('‚ö†Ô∏è No ContentDocumentIds provided. Skipping processing.');
            isProcessing = false;
            return;
        }

        // üîç Fetch RecordTypeId dynamically
        Id caseRecordTypeId;
        try {
            caseRecordTypeId = [
                SELECT Id FROM RecordType 
                WHERE SObjectType = 'Case' 
                AND DeveloperName = :RECORD_TYPE_DEVELOPER_NAME 
                LIMIT 1
            ].Id;
        } catch (Exception e) {
            System.debug('‚ùå Failed to fetch RecordTypeId: ' + e.getMessage());
            isProcessing = false;
            return;
        }

        // Fetch ContentVersion records
        List<ContentVersion> contentVersions = [ 
            SELECT Id, ContentDocumentId, Title, PathOnClient 
            FROM ContentVersion 
            WHERE ContentDocumentId IN :contentDocumentIds
        ];

        if (contentVersions.isEmpty()) {
            System.debug('‚ö†Ô∏è No matching ContentVersion records found.');
            isProcessing = false;
            return;
        }

        List<Case> casesToInsert = new List<Case>();
        Map<Id, Id> caseToFileMap = new Map<Id, Id>();

        for (ContentVersion cv : contentVersions) {
            System.debug('üìÇ Processing File: ' + cv.Title + ' | ContentDocumentId: ' + cv.ContentDocumentId);

            if (cv.Title.contains('Code Scanner') || cv.Title.contains('Code Scanner Delta')) {
                System.debug('‚úÖ File Matches Condition: ' + cv.Title);

                Case newCase = new Case();
                newCase.RecordTypeId = caseRecordTypeId;
                newCase.File_Name__c = cv.Title;
                newCase.Status = 'New';
                newCase.Origin = 'Email';         // ‚úÖ Set Origin
                newCase.Priority = 'Medium';      // ‚úÖ Set Priority

                String commitAuthor = '';         // ‚úÖ For Subject

                try {
                    ContentVersion cvWithData = [
                        SELECT VersionData 
                        FROM ContentVersion 
                        WHERE Id = :cv.Id 
                        LIMIT 1
                    ];
                    Blob csvBlob = cvWithData.VersionData;
                    String csvContent = csvBlob.toString();

                    List<String> csvLines = csvContent.split('\n');
                    if (csvLines.size() > 1) {
                        String headerLine = csvLines[0];
                        List<String> headers = headerLine.split(',');

                        Integer targetBranchIndex = headers.indexOf('TargetBranch');
                        Integer commitIndex = headers.indexOf('Commit');

                        for (Integer i = 1; i < csvLines.size(); i++) {
                            List<String> values = csvLines[i].split(',');

                            if (targetBranchIndex != -1 && values.size() > targetBranchIndex) {
                                String targetBranchValue = values[targetBranchIndex].trim();
                                newCase.Target_Environment__c = targetBranchValue;
                            }

                            if (commitIndex != -1 && values.size() > commitIndex) {
                                String commitValue = values[commitIndex].trim();
                                newCase.Case_Created_By__c = commitValue;
                                commitAuthor = commitValue;
                            }

                            if (newCase.Target_Environment__c != null || newCase.Case_Created_By__c != null) {
                                break;
                            }
                        }
                    }
                } catch (Exception e) {
                    System.debug('‚ùå Error reading CSV content: ' + e.getMessage());
                }

                newCase.Subject = commitAuthor + ' - ' + cv.Title;  // ‚úÖ Dynamic Subject

                casesToInsert.add(newCase);
                caseToFileMap.put(cv.ContentDocumentId, null);
            }
        }

        if (!casesToInsert.isEmpty()) {
            try {
                insert casesToInsert;
                System.debug('‚úÖ Successfully inserted ' + casesToInsert.size() + ' Case records.');

                Integer index = 0;
                for (Case createdCase : casesToInsert) {
                    Id docId = contentVersions[index].ContentDocumentId;
                    caseToFileMap.put(docId, createdCase.Id);
                    index++;
                }

            } catch (DmlException e) {
                System.debug('‚ùå Error inserting Cases: ' + e.getMessage());
                isProcessing = false;
                return;
            }
        } else {
            System.debug('‚ö†Ô∏è No Cases to insert.');
            isProcessing = false;
            return;
        }

        List<ContentDocumentLink> linksToInsert = new List<ContentDocumentLink>();

        for (Id contentDocId : caseToFileMap.keySet()) {
            Id caseId = caseToFileMap.get(contentDocId);

            if (caseId != null) {
                List<ContentDocumentLink> existingLinks = [
                    SELECT Id FROM ContentDocumentLink 
                    WHERE LinkedEntityId = :caseId 
                    AND ContentDocumentId = :contentDocId
                ];

                if (existingLinks.isEmpty()) {
                    ContentDocumentLink link = new ContentDocumentLink();
                    link.ContentDocumentId = contentDocId;
                    link.LinkedEntityId = caseId;
                    link.ShareType = 'V';
                    link.Visibility = 'AllUsers';

                    linksToInsert.add(link);
                }
            }
        }

        if (!linksToInsert.isEmpty()) {
            try {
                insert linksToInsert;
                System.debug('‚úÖ Successfully linked ' + linksToInsert.size() + ' files to Case records.');
            } catch (DmlException e) {
                System.debug('‚ùå Error linking files to Case: ' + e.getMessage());
            }
        }

        isProcessing = false;
    }
}
